// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestApp.DataAccess.Context;

namespace TestApp.DataAccess.Migrations
{
    [DbContext(typeof(TestAppContext))]
    [Migration("20211029105416_InitializationDb")]
    partial class InitializationDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("QuestionTest", b =>
                {
                    b.Property<int>("QuestionsId")
                        .HasColumnType("int");

                    b.Property<int>("TestsId")
                        .HasColumnType("int");

                    b.HasKey("QuestionsId", "TestsId");

                    b.HasIndex("TestsId");

                    b.ToTable("QuestionTest");
                });

            modelBuilder.Entity("TestApp.Domain.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnswerText = "3",
                            IsCorrect = true,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 2,
                            AnswerText = "7...8",
                            IsCorrect = false,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 3,
                            AnswerText = "22",
                            IsCorrect = false,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 4,
                            AnswerText = "1",
                            IsCorrect = false,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 5,
                            AnswerText = "0",
                            IsCorrect = false,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 6,
                            AnswerText = "inf.",
                            IsCorrect = false,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 7,
                            AnswerText = "There is No Correct Answer.",
                            IsCorrect = true,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 8,
                            AnswerText = "-inf.",
                            IsCorrect = false,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 9,
                            AnswerText = "Ой!",
                            IsCorrect = false,
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 10,
                            AnswerText = "-1",
                            IsCorrect = false,
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 11,
                            AnswerText = "И",
                            IsCorrect = false,
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 12,
                            AnswerText = "i",
                            IsCorrect = true,
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 13,
                            AnswerText = "Yes, I am.",
                            IsCorrect = false,
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 14,
                            AnswerText = "London.",
                            IsCorrect = false,
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 15,
                            AnswerText = "Ich spreche kein Deutsch.",
                            IsCorrect = false,
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 16,
                            AnswerText = "There is No Correct Answer.",
                            IsCorrect = true,
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 17,
                            AnswerText = "3",
                            IsCorrect = true,
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 18,
                            AnswerText = "3.14",
                            IsCorrect = false,
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 19,
                            AnswerText = "Three",
                            IsCorrect = true,
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 20,
                            AnswerText = "WTF?",
                            IsCorrect = false,
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 21,
                            AnswerText = "Yes",
                            IsCorrect = true,
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 22,
                            AnswerText = "No",
                            IsCorrect = false,
                            QuestionId = 6
                        });
                });

            modelBuilder.Entity("TestApp.Domain.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionText = "The Nearest Result for 2 x 2 = ..."
                        },
                        new
                        {
                            Id = 2,
                            QuestionText = "0 / 0 = ..."
                        },
                        new
                        {
                            Id = 3,
                            QuestionText = "(-1)^(1 / 2) = ..."
                        },
                        new
                        {
                            Id = 4,
                            QuestionText = "How Old Are You?"
                        },
                        new
                        {
                            Id = 5,
                            QuestionText = "One  Two  ...  Four"
                        },
                        new
                        {
                            Id = 6,
                            QuestionText = "Are You Sorry For Moo-moo?"
                        });
                });

            modelBuilder.Entity("TestApp.Domain.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasAlternateKey("TestName");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TestName = "Mathematics"
                        },
                        new
                        {
                            Id = 2,
                            TestName = "English"
                        },
                        new
                        {
                            Id = 3,
                            TestName = "Pretend To Be Kind"
                        });
                });

            modelBuilder.Entity("TestApp.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsController")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsController = true,
                            Name = "Mike",
                            Password = "1111"
                        },
                        new
                        {
                            Id = 2,
                            IsController = false,
                            Name = "Ann",
                            Password = "2222"
                        });
                });

            modelBuilder.Entity("TestApp.Domain.Models.UserAnswer", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("TestID")
                        .HasColumnType("int");

                    b.Property<int>("AnswerID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "TestID", "AnswerID");

                    b.HasIndex("AnswerID");

                    b.HasIndex("TestID");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("QuestionTest", b =>
                {
                    b.HasOne("TestApp.Domain.Models.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestApp.Domain.Models.Test", null)
                        .WithMany()
                        .HasForeignKey("TestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestApp.Domain.Models.Answer", b =>
                {
                    b.HasOne("TestApp.Domain.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TestApp.Domain.Models.UserAnswer", b =>
                {
                    b.HasOne("TestApp.Domain.Models.Answer", "Answer")
                        .WithMany("UserAnswers")
                        .HasForeignKey("AnswerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestApp.Domain.Models.Test", "Test")
                        .WithMany("UserAnswers")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestApp.Domain.Models.User", "User")
                        .WithMany("UserAnswers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestApp.Domain.Models.Answer", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("TestApp.Domain.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("TestApp.Domain.Models.Test", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("TestApp.Domain.Models.User", b =>
                {
                    b.Navigation("UserAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
